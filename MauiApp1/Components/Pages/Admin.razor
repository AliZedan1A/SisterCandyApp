@page "/admin"
@using System.Globalization
@using Domain.DataModels
@using Domain.DataModels.ServerSide.Models.DatabaseModel
@using Domain.Data_Transfare_Object
@using MauiApp1.service.Interface
@using Microsoft.Maui.Storage
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IApiService api
@inject IJSRuntime js
@implements IDisposable

<!-- Notification -->
@if (showNotification)
{
    <div class="notification @notificationClass animate__animated animate__slideInDown">
        <i class="@notificationIcon"></i>
        @notificationMessage
    </div>
}

<div class="admin-container">
    <!-- زر الإضافة العائم -->
    <button class="fab animate__animated animate__bounceIn" @onclick="OpenAddModal">
        <i class="fas fa-plus"></i>
    </button>

    <!-- قائمة المنتجات -->
    <div class="items-grid">
        @foreach (var item in Items)
        {
            <div class="item-card animate__animated animate__fadeInUp">
                <img src="@item.Image" class="item-image" alt="@item.Name" />
                <div class="item-details">
                    <h3>@item.Name</h3>
                    <div class="item-meta">
                        <span class="price">@item.Price.ToString("C", CultureInfo.CreateSpecificCulture("he-IL"))</span>
                        <span class="category">@item.Category</span>
                    </div>
                    <div class="item-actions">
                        <button class="action-btn edit" @onclick="(() => OpenEditModal(item))">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="action-btn delete" @onclick="(() => DeleteItem(item))">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- مودال الإضافة/التعديل -->
    @if (showModal)
    {
        <div class="modal-overlay animate__animated animate__fadeIn">
            <div class="modal-content">
                <h2>@(isEditing ? "تعديل المنتج" : "إضافة منتج جديد")</h2>

                <form @onsubmit="HandleSubmit">
                    <div class="form-group">
                        <label>اسم المنتج</label>
                        <input type="text" @bind="currentItem.Name" required />
                    </div>

                    <div class="form-group">
                        <label>السعر</label>
                        <input type="number" step="0.01" @bind="currentItem.Price" required />
                    </div>

                    <div class="form-group">
                        <label>الفئة</label>
                        <select @bind="currentItem.CategoryId">
                            @if (categorys.Any())
                            {
                                @foreach (var cat in categorys)
                                {
                                    <option value="@cat.Id">@cat.Title</option>
                                }
                            }
                            else
                            {
                                <option disabled>لا توجد فئات متاحة</option>
                            }
                        </select>
                    </div>

                    <div class="form-group">
                        <label>الصورة</label>
                        <div class="image-picker">
                            @if (!string.IsNullOrEmpty(currentItem.Image))
                            {
                                <img src="@currentItem.Image" alt="الصورة المختارة" style="max-width: 100%; height: auto; margin-bottom:10px;" />
                            }
                            <button type="button" class="pick-image-btn" @onclick="PickImageAsync">
                                <i class="fas fa-image"></i> اختر صورة
                            </button>
                        </div>
                    </div>

                    <div class="form-actions">
                        <button type="button" class="cancel-btn" @onclick="CloseModal">إلغاء</button>
                        <button type="submit" class="save-btn">
                            @(isEditing ? "حفظ التعديلات" : "إضافة المنتج")
                        </button>
                    </div>
                </form>
            </div>
        </div>
    }

    <!-- إضافة قسم لإدارة التصنيفات -->
    <div class="management-section">
        <div class="section-header">
            <h2>إدارة التصنيفات</h2>
            <button class="add-btn" @onclick="OpenAddCategoryModal">
                <i class="fas fa-plus"></i> إضافة تصنيف
            </button>
        </div>

        <div class="categories-list">
            @foreach (var cat in categorys)
            {
                <div class="category-item">
                    <span>@cat.Title</span>
                    <div class="item-actions">
                        <button class="action-btn edit" @onclick="(() => OpenEditCategoryModal(cat))">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="action-btn delete" @onclick="(() => DeleteCategory(cat))">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- مودال التصنيفات -->
    @if (showCategoryModal)
    {
        <div class="modal-overlay animate__animated animate__fadeIn">
            <div class="modal-content">
                <h2>@(isEditingCategory ? "تعديل التصنيف" : "إضافة تصنيف جديد")</h2>
                <form @onsubmit="HandleCategorySubmit">
                    <div class="form-group">
                        <label>اسم التصنيف</label>
                        <input type="text" @bind="currentCategory.Title" required />
                    </div>

                    <div class="form-actions">
                        <button type="button" class="cancel-btn" @onclick="CloseCategoryModal">إلغاء</button>
                        <button type="submit" class="save-btn">
                            @(isEditingCategory ? "حفظ التعديلات" : "إضافة التصنيف")
                        </button>
                    </div>
                </form>
            </div>
        </div>
    }
</div>

@code {
    private bool isMenuOpen = false;
    private bool showModal = false;
    private bool isEditing = false;
    private bool showCategoryModal = false;
    private bool isEditingCategory = false;
    private List<CategoryData> categorys = new();
    private List<CandyData> Items = new();
    private CandyData currentItem = new();
    private CategoryData currentCategory = new();
    private bool showNotification = false;
    private string notificationMessage = "";
    private string notificationClass = "";
    private string notificationIcon = "";
    private System.Timers.Timer notificationTimer;

    protected async override void OnInitialized()
    {
        await LoadItems();
    }

    private async Task LoadItems()
    {
        Items = (await api.GetCandies()).Value;
        categorys = (await api.GetCategorys()).Value;
        StateHasChanged();
    }

    private void OpenAddModal()
    {
        isEditing = false;
        currentItem = new CandyData();
        if (categorys.Any())
        {
            currentItem.CategoryId = categorys[0].Id;
        }
        showModal = true;
    }

    private void OpenEditModal(CandyData item)
    {
        isEditing = true;
        currentItem = new CandyData
            {
                Id = item.Id,
                Name = item.Name,
                Price = item.Price,
                CategoryId = item.CategoryId,
                Image = item.Image
            };
        showModal = true;
    }

    private async Task HandleSubmit()
    {
        try
        {
            if (isEditing)
            {
                await api.EditCandy(currentItem);
                ShowNotification("تم تحديث المنتج بنجاح", true);
            }
            else
            {
                await api.AddCandy(currentItem);
                ShowNotification("تم إضافة المنتج بنجاح", true);
            }

            await LoadItems();
            CloseModal();
        }
        catch (Exception ex)
        {
            ShowNotification($"خطأ: {ex.Message}", false);
        }
    }

    private async void DeleteItem(CandyData item)
    {
        if (await js.InvokeAsync<bool>("confirm", $"هل أنت متأكد من حذف المنتج '{item.Name}'؟"))
        {
            await api.RemoveCandy(item.Id);
            await LoadItems();
            ShowNotification("تم حذف المنتج بنجاح", true);
        }
    }

    private void CloseModal() => showModal = false;

    private void ToggleMenu() => isMenuOpen = !isMenuOpen;

    private void Logout() => Navigation.NavigateTo("/");

    private void OpenAddCategoryModal()
    {
        isEditingCategory = false;
        currentCategory = new CategoryData();
        showCategoryModal = true;
    }

    private void OpenEditCategoryModal(CategoryData category)
    {
        isEditingCategory = true;
        currentCategory = new CategoryData
            {
                Id = category.Id,
                Title = category.Title
            };
        showCategoryModal = true;
    }

    private async Task HandleCategorySubmit()
    {
        try
        {
            if (isEditingCategory)
            {
                await api.EditCategory(currentCategory);
                ShowNotification("تم تحديث التصنيف بنجاح", true);
            }
            else
            {
                var newCategory = new AddCategoryDto() { Title = currentCategory.Title };
                await api.AddCategory(newCategory);
                ShowNotification("تم إضافة التصنيف بنجاح", true);
            }

            await LoadItems();
            CloseCategoryModal();
        }
        catch (Exception ex)
        {
            ShowNotification($"خطأ: {ex.Message}", false);
        }
    }

    private async Task DeleteCategory(CategoryData category)
    {
        if (await js.InvokeAsync<bool>("confirm", $"هل أنت متأكد من حذف تصنيف '{category.Title}'؟"))
        {
            await api.RemoveCategory(category.Id);
            await LoadItems();
            ShowNotification("تم حذف التصنيف بنجاح", true);
        }
    }

    private void CloseCategoryModal() => showCategoryModal = false;

    private void ShowNotification(string message, bool isSuccess)
    {
        notificationMessage = message;
        notificationClass = isSuccess ? "success" : "error";
        notificationIcon = isSuccess ? "fas fa-check-circle" : "fas fa-times-circle";
        showNotification = true;

        notificationTimer?.Dispose();
        notificationTimer = new System.Timers.Timer(3000);
        notificationTimer.Elapsed += (sender, args) =>
        {
            showNotification = false;
            InvokeAsync(StateHasChanged);
        };
        notificationTimer.AutoReset = false;
        notificationTimer.Start();
    }

    private async Task PickImageAsync()
    {
        try
        {
            var options = new PickOptions
                {
                    PickerTitle = "اختر صورة",
                    FileTypes = FilePickerFileType.Images
                };

            var result = await FilePicker.PickAsync(options);
            if (result != null)
            {
                using var stream = await result.OpenReadAsync();
                using var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                var imageBytes = memoryStream.ToArray();
                var imageBase64 = Convert.ToBase64String(imageBytes);

                currentItem.Image = $"data:{result.ContentType};base64,{imageBase64}";
            }
        }
        catch (Exception ex)
        {
            ShowNotification($"حدث خطأ أثناء اختيار الصورة: {ex.Message}", false);
        }
    }

    public void Dispose()
    {
        notificationTimer?.Dispose();
    }
}
<style>
    /* الألوان الأساسية */
    :root {
        --primary: #FF69B4;
        --secondary: #98FB98;
        --accent: #FFB6C1;
        --text: #444;
        --shadow: 0 4px 20px rgba(0,0,0,0.1);
    }

    /* شريط التنقل */
    .admin-nav {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem 2rem;
        background: var(--primary);
        color: white;
        box-shadow: var(--shadow);
    }

    .nav-brand {
        display: flex;
        align-items: center;
        gap: 1rem;
        font-family: 'Dancing Script', cursive;
        font-size: 1.8rem;
    }

    .nav-links {
        position: relative;
    }

    .dropdown-menu {
        position: absolute;
        right: 0;
        top: 100%;
        background: white;
        border-radius: 8px;
        box-shadow: var(--shadow);
        display: none;
        min-width: 200px;
    }

        .dropdown-menu.show {
            display: block;
            animation: slideDown 0.3s ease;
        }

    .dropdown-item {
        display: flex;
        align-items: center;
        gap: 0.8rem;
        padding: 1rem;
        color: var(--text);
        text-decoration: none;
        transition: 0.3s;
    }

        .dropdown-item:hover {
            background: var(--accent);
            color: white;
        }

    /* المحتوى الرئيسي */
    .admin-container {
        padding: 2rem;
        position: relative;
    }

    /* بطاقات المنتجات */
    .items-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 2rem;
        margin-top: 2rem;
    }

    .item-card {
        background: white;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: var(--shadow);
        transition: 0.3s;
    }

        .item-card:hover {
            transform: translateY(-5px);
        }

    .item-image {
        width: 100%;
        height: 250px;
        object-fit: cover;
    }

    .item-details {
        padding: 1.5rem;
    }

    .item-meta {
        display: flex;
        justify-content: space-between;
        margin: 1rem 0;
    }

    .price {
        color: var(--primary);
        font-weight: bold;
    }

    .category {
        background: var(--secondary);
        padding: 0.3rem 0.8rem;
        border-radius: 20px;
        font-size: 0.9rem;
    }

    .item-actions {
        display: flex;
        gap: 0.5rem;
        justify-content: flex-end;
    }

    .action-btn {
        width: 40px;
        height: 40px;
        border: none;
        border-radius: 50%;
        cursor: pointer;
        transition: 0.3s;
    }

    .edit {
        background: var(--secondary);
        color: white;
    }

    .delete {
        background: #ff4757;
        color: white;
    }

    /* مودال الإضافة */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        padding: 2rem;
        border-radius: 15px;
        width: 90%;
        max-width: 500px;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

        .form-group input,
        .form-group select {
            width: 100%;
            padding: 0.8rem;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
        }

    .form-actions {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        margin-top: 2rem;
    }

    .save-btn {
        background: var(--primary);
        color: white;
        padding: 0.8rem 2rem;
        border: none;
        border-radius: 8px;
    }

    .cancel-btn {
        background: #ddd;
        color: var(--text);
        padding: 0.8rem 2rem;
        border: none;
        border-radius: 8px;
    }

    /* زر الإضافة العائم */
    .fab {
        position: fixed;
        bottom: 2rem;
        right: 2rem;
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: var(--primary);
        color: white;
        border: none;
        cursor: pointer;
        box-shadow: var(--shadow);
    }

    /* أنيميشنات */
    @@keyframes slideDown {
        from {
            transform: translateY(-20px);
            opacity: 0;
        }

        to {
            transform: translateY(0);
            opacity: 1;
        }
    }

    /* التجاوب مع الشاشات الصغيرة */
    @@media (max-width: 768px) {
        .nav-brand span {
            display: none;
        }

        .items-grid {
            grid-template-columns: 1fr;
        }

        .modal-content {
            width: 95%;
            padding: 1rem;
        }

        .fab {
            bottom: 1rem;
            right: 1rem;
        }
    }

    /* أنماط التنبيهات */
    .notification {
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        padding: 1rem 2rem;
        border-radius: 50px;
        display: flex;
        align-items: center;
        gap: 1rem;
        z-index: 9999;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    }

        .notification.success {
            background: var(--secondary);
            color: #155724;
        }

        .notification.error {
            background: #ffcccc;
            color: #721c24;
        }

    /* أنماط إدارة التصنيفات */
    .management-section {
        margin-top: 3rem;
        background: #fff;
        padding: 2rem;
        border-radius: 15px;
        box-shadow: var(--shadow);
    }

    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
    }

    .add-btn {
        background: var(--primary);
        color: white;
        border: none;
        padding: 0.8rem 1.5rem;
        border-radius: 30px;
        cursor: pointer;
        transition: 0.3s;
    }

        .add-btn:hover {
            opacity: 0.9;
        }

    .categories-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .category-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        background: #f8f9fa;
        border-radius: 10px;
        transition: 0.3s;
    }

        .category-item:hover {
            transform: translateX(10px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

    /* أنماط اختيار الصورة */
    .image-picker {
        display: flex;
        flex-direction: column;
        gap: 10px;
        max-height: 300px; /* على سبيل المثال، ارتفاع أقصى */
        overflow-y: auto; /* السماح بالتمرير إذا زاد المحتوى */
    }

    .pick-image-btn {
        background: var(--primary);
        color: white;
        padding: 0.8rem 1.2rem;
        border: none;
        border-radius: 8px;
        cursor: pointer;
    }

    body, html {
        overflow-x: hidden; /* لمنع التمدد الأفقي */
        overflow-y: auto; /* للسماح بالتمرير العمودي */
    }

</style>
